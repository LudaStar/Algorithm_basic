package Dijkstra;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Node implements Comparable<Node>{
	int to, weight;

	public Node(int to, int weight) {
		this.to = to;
		this.weight = weight;
	}

	@Override
	public int compareTo(Node o) {
		return weight - o.weight;
	}
	
}

public class Baekjoon_1753_최단경로 {
	
	static int V, E, K; // 정점, 간선 개수, 시작 정점
	static int[] distance;
	static ArrayList<Node>[] adjlist;
	static boolean[] visited;

	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(br.readLine());

		visited = new boolean[V+1];
		distance = new int[V+1];
		Arrays.fill(distance, Integer.MAX_VALUE);

		adjlist = new ArrayList[V+1];
		for(int i = 1; i < V+1; i++) adjlist[i] = new ArrayList<>();
		
		for(int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			adjlist[u].add(new Node(v,w));
		}
		
		dijkstra();

		for(int i = 1; i < distance.length; i++) {
			if(distance[i] == Integer.MAX_VALUE)
				System.out.println("INF");
			else
				System.out.println(distance[i]);
		}
		
	}
	private static void dijkstra() {
		PriorityQueue<Node> q = new PriorityQueue<>();
		
		// 출발위치
		distance[K] = 0;
		q.offer(new Node(K,0));
		
		while(!q.isEmpty()) {
			Node node = q.poll();
			int to = node.to;
			int weight = node.weight;
			
			if(visited[to]) continue;
			
			visited[to] = true;
			for(Node next : adjlist[to]) {
				if(distance[next.to] > weight+next.weight) {
					distance[next.to] = weight+next.weight;
					q.offer(new Node(next.to, distance[next.to]));
				}
			}

		}
	}
}
