package Floyd_Warshall;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Point {
	int x;
	int y;
	
	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
}
public class Baekjoon_9205_맥주마시면서걸어가기 {
	
	static boolean[] visited;
	static ArrayList<ArrayList<Integer>> graph;
	static int store;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		
		for(int tc = 1; tc<=T; tc++) {
			store = Integer.parseInt(br.readLine()); // 편의점 개수
			ArrayList<Point> map = new ArrayList<>();
			graph = new ArrayList<>();
			visited = new boolean[store+2];
			
			
			for(int i = 0; i < store + 2; i++) { // 집, 편의점들, 도착지
				StringTokenizer st = new StringTokenizer(br.readLine(), " ");
				int x = Integer.parseInt(st.nextToken());
				int y = Integer.parseInt(st.nextToken());
				map.add(new Point(x,y));
			} // 데이터 입력
			
			 // graph에 ArrayList선언
			for(int i = 0; i < store + 2; i++) graph.add(new ArrayList<>());
			
			
			// 1000m 이하를 만족하는 두 정점을 이어줌
			for(int i = 0; i < store+2; i++) {
				for(int j = i+1; j < store+2; j++) {
					// 맥주 50미터 20개니까 총 1000미터는 갈 수 있음
					if(getDistance(map.get(i), map.get(j)) <= 1000) {
						graph.get(i).add(j);
						graph.get(j).add(i);
					}
				}
			}
			if(bfs())
				System.out.println("happy");
			else
				System.out.println("sad");
		}
		
	}
	
	public static boolean bfs() {
		Queue<Integer> q = new LinkedList<>();
		visited[0] = true;
		q.offer(0);
		
		while(!q.isEmpty()) {
			int current = q.poll();
			
			if(current == store+1) return true;
			
			for(int next : graph.get(current)) {
				if(!visited[next]) {
					visited[next] = true;
					q.offer(next);
				}
			}
			
		}
		return false;
		
	}

	public static int getDistance(Point n1, Point n2) {
		return Math.abs(n1.x - n2.x) + Math.abs(n1.y - n2.y);
	}
}
